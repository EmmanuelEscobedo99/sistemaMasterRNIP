import { createSlice } from '@reduxjs/toolkit';

// 游댳 Estado inicial del slice de im치genes
const initialState = {
  imagenes: [null, null, null], // Almacena hasta 3 im치genes
  loading: [false, false, false], // Estado de carga para cada imagen
  idAlterna: 0, // ID alternativo asociado a las im치genes
  imagenesObtenidas: [], // Im치genes obtenidas del servidor
  obtuveImagenes: false, // Indica si se recuperaron im치genes del servidor
  enviando: false, // Indica si se est치 enviando informaci칩n al servidor
  errores: [], // Almacena errores generales
  errores2: {}, // Almacena errores espec칤ficos por 칤ndice
};

// 游댳 Creaci칩n del slice de im치genes con Redux Toolkit
export const imagenesSlice = createSlice({
  name: 'imagenes',
  initialState,
  reducers: {
    // 游댲 Actualiza el array de im치genes con nuevas im치genes seleccionadas
    setImagenes: (state, action) => {
      state.imagenes = action.payload;
    },

    // 游댲 Controla el estado de carga de cada imagen (true o false)
    setLoading: (state, action) => {
      state.loading = action.payload;
    },

    // 游댲 Guarda el ID alternativo obtenido desde el backend
    setIdAlterna: (state, action) => {
      state.idAlterna = action.payload;
    },

    // 游댲 Almacena las im치genes obtenidas desde el backend
    setImagenesObtenidas: (state, action) => {
      state.imagenesObtenidas = action.payload;
    },

    // 游댲 Indica si se lograron recuperar im치genes
    setObtuveImagenes: (state, action) => {
      state.obtuveImagenes = action.payload;
    },

    // 游댲 Maneja el estado de "enviando datos al servidor"
    setEnviando: (state, action) => {
      state.enviando = action.payload;
    },

    // 游댲 Almacena un array de errores generales
    setErrores: (state, action) => {
      state.errores = action.payload;
    },

    // 游댲 Agrega un error nuevo al array de errores generales
    agregarError: (state, action) => {
      state.errores.push(action.payload);
    },

    // 游댲 Limpia todos los errores generales
    limpiarErrores: (state) => {
      state.errores = [];
    },

    // 游댲 Agrega un error espec칤fico a `errores2` usando un 칤ndice
    agregarError2: (state, action) => {
      const { index, mensaje } = action.payload;
      state.errores2[index] = mensaje;
    },

    // 游댲 Elimina un error espec칤fico de `errores2` por su 칤ndice
    limpiarError2: (state, action) => {
      delete state.errores2[action.payload];
    },
  },
});

// 游댳 Exportar todas las acciones del slice
export const {
  setImagenes,
  setLoading,
  setIdAlterna,
  setImagenesObtenidas,
  setObtuveImagenes,
  setEnviando,
  setErrores,
  agregarError,
  limpiarErrores,
  agregarError2,
  limpiarError2,
} = imagenesSlice.actions;

// 游댳 Exportar el reducer por defecto para integrarlo en el store de Redux
export default imagenesSlice.reducer;
